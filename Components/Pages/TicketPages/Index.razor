@page "/Ticket/Index"
@inject ClienteService clienteService
@inject TecnicoService tecnicoService
@inject TicketService ticketService
@inject NavigationManager navigation
@using System.Globalization
@using System.Linq.Expressions
@rendermode InteractiveServer

<PageTitle>Tickets</PageTitle>

<div class="container mt-3">
    <div class="card shadow-lg">
        <div class="card-header mb-1 text-center bg-white border-0">
            <h2 class="card-title m-3"><strong>Consulta de Tickets</strong></h2>
        </div>

        <div class="card-body">
            <div class="row mb-2">
                <div class="col-md-3">
                    <label class="form-label"><strong>Filtrar por</strong></label>
                    <InputSelect class="form-select" @bind-Value="filtro">
                        <option value=""disabled selected>Elija una opción</option>
                        <option value="id">TicketId</option>
                        <option value="ClienteNombres">Cliente Nombres</option>
                        <option value="Asunto">Asunto</option>
                        <option value="Prioridad">Prioridad</option>
                        <option value="Descripcion">Descripción</option>
                        <option value="TiempoInvertido">Tiempo Invertido</option>
                        <option value="TecnicoNombres">Técnico Nombres</option>
                    </InputSelect>
                </div>

                <div class="col-md-4">
                    <label class="form-label"><strong>Búsqueda</strong></label>
                    <div class="input-group">
                        <input class="form-control" @bind="valorFiltro" placeholder="Buscar" />
                        <button type="button" class="btn btn-primary bi bi-search" @onclick="Buscar">
                            Buscar
                        </button>
                    </div>
                </div>
                <div class="col-5 text-end">
                    <a href="/Ticket/Create" class="btn btn-success">
                        <span class="bi bi-plus-square"></span> Crear
                    </a>
                </div>
            </div>

            <div class="row mb-4">
                <div class="col-md-3">
                    <label class="form-label"><strong>Desde Fecha</strong></label>
                    <InputDate class="form-control" @bind-Value="Desde" />
                </div>
                <div class="col-md-3">
                    <label class="form-label"><strong>Hasta Fecha</strong></label>
                    <InputDate class="form-control" @bind-Value="Hasta" />
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <button type="button" class="btn btn-warning bi bi-arrow-clockwise" @onclick="Restablecer">
                        Restablecer Filtros
                    </button>
                </div>
            </div>

            @if (TicketPaginado.Any())
            {
                <table class="table table-hover table-bordered text-center mt-4">
                    <thead class="table-striped text-black">
                        <tr>
                            <th>Id</th>
                            <th>Fecha</th>
                            <th>Descripción</th>
                            <th>Prioridad</th>
                            <th>Cliente</th>
                            <th>Asunto</th>
                            <th>Técnico</th>
                            <th>Tiempo Invertido</th>
                            <th>Editar</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var ticket in TicketPaginado)
                        {
                            var Cliente = AllClients.FirstOrDefault(c => c.ClienteId == ticket.ClienteId);
                            var Tecnico = AllTecnicos.FirstOrDefault(t => t.TecnicoId == ticket.TecnicoId);

                            <tr>
                                <td>@ticket.TicketId</td>
                                <td>@ticket.Fecha.ToShortDateString()</td>
                                <td>@ticket.Descripcion</td>
                                <td>@ticket.Prioridad</td>
                                <td>@(Cliente?.Nombres ?? "No encontrado")</td>
                                <td>@ticket.Asunto</td>
                                <td>@(Tecnico?.Nombres ?? "No encontrado")</td>
                                <td>@ticket.TiempoInvertido</td>

                                <td>
                                    <a href="/Ticket/Edit/@ticket.TicketId" class="btn btn-outline-success bi bi-pencil-fill"></a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <div class="d-flex justify-content-between">
                    <button class="btn btn-outline-secondary" @onclick="AnteriorPagina" disabled="@(!PuedeRetroceder)">Anterior</button>
                    <span>Página @PaginaActual de @TotalPaginas</span>
                    <button class="btn btn-outline-secondary" @onclick="SiguientePagina" disabled="@(!PuedeAvanzar)">Siguiente</button>
                </div>
            }
            else
            {
                <div class="alert alert-warning text-center mt-4">No se encontraron resultados.</div>
            }
        </div>

        <div class="card-footer d-flex justify-content-between">
            <label><strong>Cantidad: @FilteredTickets.Count()</strong></label>
            <label><strong>Total de Minutos Trabajados en Tickets: @FilteredTickets.Sum(c => c.TiempoInvertido).ToString(CultureInfo.CurrentCulture)</strong></label>
        </div>
    </div>
</div>

@code {
    public List<Tickets> AllTickets = new();
    public List<Tickets> FilteredTickets = new();
    public List<Clientes> AllClients = new();
    public List<Tecnicos> AllTecnicos = new();

    private int PaginaActual = 1;
    private int TamañoPagina = 10;

    private IEnumerable<Tickets> TicketPaginado => FilteredTickets
        .OrderByDescending(t => t.TicketId)
        .Skip((PaginaActual - 1) * TamañoPagina)
        .Take(TamañoPagina);

    private int TotalPaginas => (int)Math.Ceiling((double)FilteredTickets.Count / TamañoPagina);
    private bool PuedeRetroceder => PaginaActual > 1;
    private bool PuedeAvanzar => PaginaActual < TotalPaginas;

    private string filtro = "";
    private string valorFiltro = "";
    public DateTime? Desde { get; set; } = null;
    public DateTime? Hasta { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadAllData();
        await ApplyFiltersAndRefresh();
    }

    private async Task LoadAllData()
    {
        AllTickets = await ticketService.Listar(t => true);
        AllClients = await clienteService.Listar(c => true);
        AllTecnicos = await tecnicoService.Listar(t => true);
    }

    private async Task ApplyFiltersAndRefresh()
    {
        PaginaActual = 1;
        var ticketsToFilter = AllTickets.AsQueryable();

        if (!string.IsNullOrWhiteSpace(valorFiltro))
        {
            if (filtro == "id" && int.TryParse(valorFiltro, out int ticketId))
            {
                ticketsToFilter = ticketsToFilter.Where(t => t.TicketId == ticketId);
            }
            else if (filtro == "ClienteNombres")
            {
                ticketsToFilter = ticketsToFilter.Where(t => AllClients.Any(c => c.ClienteId == t.ClienteId && c.Nombres.ToLower().Contains(valorFiltro.ToLower())));
            }
            else if (filtro == "Asunto")
            {
                ticketsToFilter = ticketsToFilter.Where(t => t.Asunto.ToLower().Contains(valorFiltro.ToLower()));
            }
            else if (filtro == "Prioridad")
            {
                ticketsToFilter = ticketsToFilter.Where(t => t.Prioridad.ToLower().Contains(valorFiltro.ToLower()));
            }
            else if (filtro == "Descripcion")
            {
                ticketsToFilter = ticketsToFilter.Where(t => t.Descripcion.ToLower().Contains(valorFiltro.ToLower()));
            }
            else if (filtro == "TiempoInvertido" && decimal.TryParse(valorFiltro, out decimal tiempo))
            {
                ticketsToFilter = ticketsToFilter.Where(t => t.TiempoInvertido == tiempo);
            }
            else if (filtro == "TecnicoNombres")
            {
                ticketsToFilter = ticketsToFilter.Where(t => AllTecnicos.Any(tec => tec.TecnicoId == t.TecnicoId && tec.Nombres.ToLower().Contains(valorFiltro.ToLower())));
            }
        }

        if (Desde.HasValue)
        {
            ticketsToFilter = ticketsToFilter.Where(t => t.Fecha.Date >= Desde.Value.Date);
        }
        if (Hasta.HasValue)
        {
            ticketsToFilter = ticketsToFilter.Where(t => t.Fecha.Date <= Hasta.Value.Date);
        }

        FilteredTickets = ticketsToFilter.ToList();
        StateHasChanged();
    }

    private async Task Buscar()
    {
        await ApplyFiltersAndRefresh();
    }

    private async Task Restablecer()
    {
        filtro = "";
        valorFiltro = "";
        Desde = null;
        Hasta = null;
        await ApplyFiltersAndRefresh();
    }

    private void SiguientePagina()
    {
        if (PuedeAvanzar)
        {
            PaginaActual++;
            StateHasChanged();
        }
    }

    private void AnteriorPagina()
    {
        if (PuedeRetroceder)
        {
            PaginaActual--;
            StateHasChanged();
        }
    }
}