@page "/Sistema/Index"
@inject SistemaServices sistemaService
@inject NavigationManager navigation
@rendermode InteractiveServer

<PageTitle>Sistemas</PageTitle>

<div class="container mt-3">
    <div class="card shadow-lg">
        <div class="card-header mb-1 text-center bg-white border-0">
            <h2 class="card-title m-3"><strong>Consulta de Sistemas</strong></h2>
        </div>

        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-3">
                    <label class="form-label"><strong>Filtrar por</strong></label>
                    <InputSelect class="form-select" @bind-Value="filtro" @onchange="OnFiltroChanged">
                        <option value="" disabled selected>Elija una opción</option>
                        <option value="Id">SistemaId</option>
                        <option value="Descripcion">Descripción</option>
                        <option value="Complejidad">Complejidad</option>
                    </InputSelect>
                </div>

                <div class="col-md-4">
                    <label class="form-label"><strong>Búsqueda</strong></label>
                    <div class="input-group">
                        @if (filtro == "Complejidad")
                        {
                            <InputSelect class="form-select" @bind-Value="valorFiltro">
                                <option value="">Seleccione</option>
                                <option value="1">1 - Baja</option>
                                <option value="2">2 - Media</option>
                                <option value="3">3 - Alta</option>
                            </InputSelect>
                        }
                        else
                        {
                            <input class="form-control" @bind="valorFiltro" placeholder="Buscar" />
                        }
                        <button type="button" class="btn btn-primary bi bi-search" @onclick="Buscar">
                            Buscar
                        </button>
                    </div>
                </div>

                <div class="col-md-5 text-end d-flex align-items-end justify-content-end">
                    <button class="btn btn-warning me-2 bi bi-arrow-clockwise" @onclick="Restablecer">
                        Restablecer Filtros
                    </button>
                    <a href="/Sistema/Create" class="btn btn-success">
                        <span class="bi bi-plus-square"></span> Crear
                    </a>
                </div>
            </div>

            @if (SistemaPaginado.Any())
            {
                <table class="table table-hover table-bordered text-center mt-4">
                    <thead class="table-striped text-black">
                        <tr>
                            <th>Id</th>
                            <th>Descripción</th>
                            <th>Complejidad</th>
                            <th>Editar</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var sistema in SistemaPaginado)
                        {
                            <tr>
                                <td>@sistema.SistemasId</td>
                                <td>@sistema.Descripcion</td>
                                <td>@GetComplejidadTexto(sistema.Complejidad)</td>
                                <td>
                                    <a href="/Sistema/Edit/@sistema.SistemasId" class="btn btn-outline-success bi bi-pencil-fill"></a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <div class="d-flex justify-content-between">
                    <button class="btn btn-outline-secondary" @onclick="AnteriorPagina" disabled="@(!PuedeRetroceder)">Anterior</button>
                    <span>Página @PaginaActual de @TotalPaginas</span>
                    <button class="btn btn-outline-secondary" @onclick="SiguientePagina" disabled="@(!PuedeAvanzar)">Siguiente</button>
                </div>
            }
            else
            {
                <div class="alert alert-warning text-center mt-4">No se encontraron resultados.</div>
            }
        </div>

        <div class="card-footer d-flex justify-content-between">
            <label><strong>Cantidad: @FilteredSistemas.Count()</strong></label>
        </div>
    </div>
</div>

@code {
    public List<Sistemas> AllSistemas = new();
    public List<Sistemas> FilteredSistemas = new();

    private int PaginaActual = 1;
    private int TamañoPagina = 10;

    private IEnumerable<Sistemas> SistemaPaginado => FilteredSistemas
        .OrderByDescending(s => s.SistemasId)
        .Skip((PaginaActual - 1) * TamañoPagina)
        .Take(TamañoPagina);

    private int TotalPaginas => (int)Math.Ceiling((double)FilteredSistemas.Count / TamañoPagina);
    private bool PuedeRetroceder => PaginaActual > 1;
    private bool PuedeAvanzar => PaginaActual < TotalPaginas;

    private string filtro = "";
    private string valorFiltro = "";

    protected override async Task OnInitializedAsync()
    {
        AllSistemas = await sistemaService.Listar(t => true);
        await AplicarFiltros();
    }

    private async Task Buscar()
    {
        await AplicarFiltros();
    }

    private async Task AplicarFiltros()
    {
        PaginaActual = 1;

        if (!string.IsNullOrEmpty(filtro))
        {
            switch (filtro)
            {
                case "Id":
                    FilteredSistemas = AllSistemas.Where(s => s.SistemasId.ToString().Contains(valorFiltro)).ToList();
                    break;
                case "Descripcion":
                    FilteredSistemas = AllSistemas.Where(s => s.Descripcion.Contains(valorFiltro, StringComparison.OrdinalIgnoreCase)).ToList();
                    break;
                case "Complejidad":
                    if (int.TryParse(valorFiltro, out var comp))
                    {
                        FilteredSistemas = AllSistemas.Where(s => s.Complejidad == comp).ToList();
                    }
                    else
                    {
                        FilteredSistemas = new(); // vacío si el valor no es válido
                    }
                    break;
                default:
                    FilteredSistemas = AllSistemas;
                    break;
            }
        }
        else
        {
            FilteredSistemas = AllSistemas;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task Restablecer()
    {
        filtro = "";
        valorFiltro = "";
        await AplicarFiltros();
    }

    private void AnteriorPagina()
    {
        if (PaginaActual > 1)
        {
            PaginaActual--;
        }
    }

    private void SiguientePagina()
    {
        if (PaginaActual < TotalPaginas)
        {
            PaginaActual++;
        }
    }

    private string GetComplejidadTexto(int complejidad) =>
        complejidad switch
        {
            1 => "Baja",
            2 => "Media",
            3 => "Alta",
            _ => "Desconocida"
        };

    private async Task OnFiltroChanged(ChangeEventArgs e)
    {
        filtro = e.Value?.ToString();
        valorFiltro = ""; // limpiar el campo al cambiar tipo de filtro
        await AplicarFiltros();
    }
}
