@page "/Sistema/Edit/{SistemaId:int}"
@inject SistemaServices sistemaService
@inject NavigationManager navigation
@rendermode InteractiveServer

<EditForm Model="Sistema" OnValidSubmit="Modificar">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container p-0">
        <div class="card shadow-lg">
            <div class="card-header text-center bg-primary text-white">
                <h3 class="card-title"><strong>Modificar Sistema</strong></h3>
            </div>

            <div class="card-body">
                @*Id*@
                <div class="mb-3">
                    <label class="form-label"><strong>SistemasId</strong></label>
                    <InputNumber class="form-control" @bind-Value="Sistema.SistemasId" readonly></InputNumber>
                </div>

                @*Descripcion*@
                <div class="mb-3">
                    <label class="form-label" for="Descripcion"><strong>Descripción</strong></label>
                    <InputText id="Descripcion" class="form-control" @bind-Value="Sistema.Descripcion"></InputText>
                    <ValidationMessage For="@(() => Sistema.Descripcion)"></ValidationMessage>
                </div>

                @*Complejidad*@
                <div class="mb-3">
                    <label class="form-label" for="Complejidad"><strong>Complejidad</strong></label>
                    <InputSelect id="Complejidad" class="form-select" @bind-Value="Sistema.Complejidad">
                        <option value="" disabled selected>Seleccione una opción</option>
                        <option value="1">Baja</option>
                        <option value="2">Media</option>
                        <option value="3">Alta</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => Sistema.Complejidad)"></ValidationMessage>
                </div>
            </div>

            <div class="card-footer text-center mt-3">
                <button type="submit" class="btn btn-outline-success">
                    <span class="bi bi-check-circle-fill"></span> Guardar
                </button>

                <button type="button" class="btn btn-outline-danger ml-2" @onclick="Eliminar">
                    <span class="bi bi-trash-fill"></span> Eliminar
                </button>

                <a href="/Sistema/Index/" class="btn btn-secondary">
                    <i class="bi bi-arrow-bar-left"></i> Volver
                </a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int SistemaId { get; set; }

    public Sistemas Sistema { get; set; } = new Sistemas();

    [Inject] protected ToastService ToastService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (SistemaId > 0)
        {
            Sistema = await sistemaService.Buscar(SistemaId);
        }
    }

    public Edit(ToastService toastService)
    {
        ToastService = toastService;
    }

    public async Task Modificar()
    {
        if (SistemaId > 0)
        {
            await sistemaService.Guardar(Sistema);
            ToastService.Notify(new(ToastType.Success, "Éxito", $"Sistema editado correctamente."));
            navigation.NavigateTo("/Sistema/Index");
        }
        else
        {
            ToastService.Notify(new(ToastType.Danger, "Error", $"No se pudo editar el sistema."));
        }
    }

    private async Task Eliminar()
    {
        bool eliminado = await sistemaService.Eliminar(Sistema.SistemasId);

        if (eliminado)
        {
            ToastService.Notify(new(ToastType.Success, "Éxito", $"Sistema eliminado correctamente."));
            navigation.NavigateTo("/Sistema/Index");
        }
        else
        {
            ToastService.Notify(new(ToastType.Danger, "Error", $"No se pudo eliminar el sistema."));
        }
    }
}
